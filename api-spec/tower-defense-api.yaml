openapi: 3.0.0
info:
  version: '1'
  title: AuthServiceAPI
  description: API for Tower Defense game study project. Performed by Eric Shelbogashev.

paths:
  /auth/register:
    post:
      summary: Method for initializing user registration.
      tags:
        - Auth
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        '200':
          description: The user has been successfully registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /auth/login:
    post:
      summary: Method for user authentication.
      tags:
        - Auth
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        '200':
          description: Authorization was successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDto"
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /user/friends/add:
    post:
      summary: A method for adding a user friend.
      tags:
        - User
      operationId: addFriend
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        '200':
          description: The friend has been added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /user/friends/remove:
    post:
      summary: A method for deleting a user's friend.
      tags:
        - User
      operationId: removeFriend
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        '200':
          description: The friend has been successfully deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /user/friends/get:
    get:
      summary: Method for getting a list of friends.
      tags:
        - User
      operationId: getFriends
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The list of friends has been received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendResponse"
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /user/friends/get/online:
    get:
      summary: Method for getting a list of friends.
      tags:
        - User
      operationId: getFriendsOnline
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The list of online friends has been received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebsocketUserInfoDto"
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /user/lobby/create:
    post:
      summary: Method witch performs lobby creation.
      tags:
        - User
      operationId: lobbyCreate
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Lobby was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyDto"
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /user/lobby/accept:
    post:
      summary: Method witch performs invitation accept.
      tags:
        - User
      operationId: lobbyAccept
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyDto"
      responses:
        '200':
          description: Lobby was being destroyed.
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /user/lobby/destroy:
    post:
      summary: Method witch performs lobby destruction.
      tags:
        - User
      operationId: lobbyDestroy
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Lobby was being destroyed.
        '400':
          description: Something went wrong.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    MessageDto:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    AuthDto:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    UserDto:
      type: object
      required:
        - username
      properties:
        username:
          type: string
    WebsocketUserInfoDto:
      type: object
      required:
        - sessionId
        - username
        - status
      properties:
        sessionId:
          type: string
        username:
          type: string
        status:
          type: string
    FriendResponse:
      type: array
      items:
        $ref: "#/components/schemas/UserDto"
    LobbyDto:
      type: object
      required:
        - id
        - createdAt
        - adminSessionId
        - members
      properties:
        id:
          type: string
        createdAt:
          type: string
        adminSessionId:
          type: string
        members:
          type: array
          items:
            type: string
    TokenDto:
      type: object
      required:
        - token
      properties:
        token:
          type: string