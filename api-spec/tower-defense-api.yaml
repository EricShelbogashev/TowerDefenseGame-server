openapi: 3.0.0
info:
  version: '0'
  title: AuthServiceAPI
  description: API for Tower Defense game study project. Performed by Eric Shelbogashev.

paths:
  /auth/register:
    post:
      summary: Метод для инициализации регистрации пользователя.
      tags:
        - Auth
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        '200':
          description: Пользователь успешно зарегистрирован.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        '400':
          description: Что-то пошло не так.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /auth/authorize:
    post:
      summary: Метод для аутентификации пользователя.
      tags:
        - Auth
      operationId: authorizeUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        '200':
          description: Авторизация прошла успешно.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        '400':
          description: Что-то пошло не так.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /user/friends/add:
    post:
      summary: Метод для добавления друга пользователя.
      tags:
        - User
      operationId: addFriend
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FriendRequest"
      responses:
        '200':
          description: Друг успешно добавлен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        '400':
          description: Что-то пошло не так.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /user/friends/remove:
    post:
      summary: Метод для удаления друга пользователя.
      tags:
        - User
      operationId: removeFriend
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FriendRequest"
      responses:
        '200':
          description: Друг успешно удален.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        '400':
          description: Что-то пошло не так.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /user/friends/get:
    get:
      summary: Метод для получения списка друзей.
      tags:
        - User
      operationId: getFriends
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список друзей получен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendResponse"
        '400':
          description: Что-то пошло не так.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /user/friends/get/online:
    get:
      summary: Метод для получения списка друзей.
      tags:
        - User
      operationId: getFriendsOnline
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список друзей получен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendOnlineResponse"
        '400':
          description: Что-то пошло не так.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /user/lobby/create:
    post:
      summary: Method witch performs lobby creation.
      tags:
        - User
      operationId: lobbyCreate
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Lobby was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbyDto"
        '400':
          description: Lobby is already created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /user/lobby/accept:
    post:
      summary: Method witch performs invitation accept.
      tags:
        - User
      operationId: lobbyAccept
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LobbyDto"
      responses:
        '200':
          description: Lobby was being destroyed.
        '400':
          description: Lobby is not exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /user/lobby/destroy:
    post:
      summary: Method witch performs lobby destruction.
      tags:
        - User
      operationId: lobbyDestroy
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Lobby was being destroyed.
        '400':
          description: Lobby is not exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Message:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    UserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    AuthRequest:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
        password:
          type: string
    FriendRequest:
      type: object
      required:
        - identifier
      properties:
        identifier:
          type: string
    UserInfoResponse:
      type: object
      required:
        - username
      properties:
        username:
          type: string
    WebsocketUserInfoResponse:
      type: object
      required:
        - sessionId 
        - username 
        - status 
      properties:
        sessionId:
          type: string
        username:
          type: string
        status:
          type: string
    FriendResponse:
      type: array
      items:
        $ref: "#/components/schemas/UserInfoResponse"
    LobbyDto:
      type: object
      required:
        - id
        - createdAt
        - adminSessionId
        - members
      properties:
        id:
          type: string
        createdAt:
          type: string
        adminSessionId:
          type: string
        members:
          type: array
          items:
            type: string
    FriendOnlineResponse:
      type: array
      items:
        $ref: "#/components/schemas/WebsocketUserInfoResponse"
    AuthResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    LobbyCreateResponse:
      type: object
      required:
        - lobbyId
      properties:
        lobbyId:
          type: string
    LobbyMembersResponse:
      type: array
      items:
        $ref: "#/components/schemas/UserInfoResponse"